# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Invitation {
  createdAt: DateTime!
  id: ID!
  invitedBy: ID!
  isPublic: Boolean!
  roomId: ID!
  userId: ID!
}

type InvitationDetails {
  createdAt: DateTime!
  id: ID!
  invitedBy: Member!
  isPublic: Boolean!
  room: Room
}

type InvitationLinkResult {
  link: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Me {
  avatarUrl: String!
  color: String!
  email: String!
  id: ObjectId!
  links: UserLinks
  name: String!
  rooms: [Room!]!
  username: String!
}

type Member {
  avatarUrl: String!
  color: String!
  createdAt: DateTime!
  id: ID!
  links: UserLinks
  name: String!
  rooms: [ID!]!
  username: String!
}

type Message {
  author: Member
  content: String!
  createdAt: DateTime
  id: ID!
  mentions: [ID!]!
  roomId: ID!
}

type Messages {
  messages: [Message!]!
  totalDocs: Int
  totalPages: Int
}

type Mutation {
  acceptInvitation(token: String!): Boolean!
  createInvitationLink(roomId: ObjectId!): InvitationLinkResult!
  createRoom(name: String!): Room!
  deleteMessage(messageId: ObjectId!): Message!
  deleteRoom(roomId: ObjectId!): Room
  editMessage(content: String!, messageId: ObjectId!): Message!
  inviteMembers(members: [ObjectId!]!, roomId: ObjectId!): [Invitation!]!
  logout: Boolean!
  readNotification(id: ObjectId!): Notification!
  removeMemberFromRoom(memberId: ObjectId!, roomId: ObjectId!): Member
  sendMessage(content: String!, roomId: ObjectId!): Message!
  setColor(color: String!): Member!
  setUserLinks(github: String, instagram: String, twitter: String, website: String): Member!
}

type Notification {
  createdAt: DateTime!
  id: ID!
  payload: JSONObject!
  receiver: ID!
  seen: Boolean!
  sender: Member!
  type: NOTIFICATION_TYPE!
}

"""Notification types enums"""
enum NOTIFICATION_TYPE {
  INVITATION
  MENTION
}

"""Mongo object id scalar type"""
scalar ObjectId

type Query {
  getInvitationInfo(token: String!): InvitationDetails!
  getMessages(limit: Int!, offset: Int!, roomId: ObjectId!): Messages!
  getNotifications: [Notification!]!
  getRoom(id: ObjectId!): Room!
  getUser(id: ObjectId!): User!
  listCurrentUserRooms: [Room!]!
  listRooms: [Room!]!
  listUsers: [Member!]!
  me: Me!
}

type Room {
  createdAt: DateTime!
  id: ObjectId!
  members: [Member!]!
  messages: [Message!]!
  name: String!
  owner: ObjectId!
}

type Subscription {
  onDeleteMessage(roomId: ObjectId!): Message!
  onNewMessage(roomId: ObjectId!): Message!
  onNewNotification: Notification!
  onUpdateMessage(roomId: ObjectId!): Message!
}

type User {
  color: String!
  createdAt: DateTime!
  id: ObjectId!
  isBot: Boolean
  links: UserLinks
  name: String!
  rooms: [Room!]!
  username: String!
}

type UserLinks {
  github: String
  instagram: String
  twitter: String
  website: String
}
